// components/dialogs/ViewLabTest.tsx
"use client";

import React, { useState, useRef } from "react";
import { Modal } from "../ui/Modal";
import { getLabTestById } from "@/app/actions/laboratory";
import { LabTest } from "@/types/dataTypes";
import { format } from "date-fns";
import { useReactToPrint } from "react-to-print";
import jsPDF from "jspdf";

// Extend LabTest to include optional fields
interface ExtendedLabTest extends LabTest {
  units?: string;
  reference_range?: string;
  notes?: string;
}

interface ViewLabTestProps {
  labTestId: number;
  trigger: React.ReactNode;
}

export const ViewLabTest: React.FC<ViewLabTestProps> = ({ labTestId, trigger }) => {
  const [labTest, setLabTest] = useState<ExtendedLabTest | null>(null);
  const [isOpen, setIsOpen] = useState(false);
  const contentRef = useRef<HTMLDivElement>(null);

  const today = new Date().toLocaleDateString();

  const formatDateSafe = (dateValue?: string | Date) => {
    if (!dateValue) return "";
    const date = dateValue instanceof Date ? dateValue : new Date(dateValue);
    return isNaN(date.getTime()) ? "" : format(date, "yyyy-MM-dd");
  };

  const openModal = async () => {
    const res = await getLabTestById(labTestId);
    if (res.success && res.data) {
      const data = res.data as any;
      const test: ExtendedLabTest = {
        ...data,
        test_date:
          data.test_date instanceof Date ? data.test_date.toISOString() : data.test_date,
        technician: data.technician
          ? { id: Number(data.technician.id), name: data.technician.name }
          : undefined,
      };
      setLabTest(test);
      setIsOpen(true);
    }
  };

  // Print functionality
  const handlePrint = useReactToPrint({
    content: () => contentRef.current,
    documentTitle: `LabTest_${labTest?.id ?? ""}`,
    pageStyle: `
      @media print {
        body { -webkit-print-color-adjust: exact; font-family: sans-serif; }
        header, footer { position: fixed; left: 0; right: 0; text-align: center; font-size: 12px; color: #555; }
        header { top: 0; padding: 10px; border-bottom: 1px solid #ccc; }
        footer { bottom: 0; padding: 10px; border-top: 1px solid #ccc; }
      }
    `,
  });

  // Save as PDF
  const handleSavePDF = () => {
    if (!contentRef.current) return;
    const doc = new jsPDF({ orientation: "portrait", unit: "pt", format: "a4" });

    // Header
    doc.setFontSize(14);
    doc.text("🏥 Healthcare System – Lab Test Report", 40, 40);
    doc.setFontSize(10);
    doc.text(`Generated on: ${today}`, 40, 60);

    // Content
    doc.html(contentRef.current, {
      callback: (doc) => {
        // Footer
        const pageHeight = doc.internal.pageSize.height;
        doc.setFontSize(10);
        doc.text(
          "Confidential – Generated by Healthcare System",
          doc.internal.pageSize.width / 2,
          pageHeight - 20,
          { align: "center" }
        );

        doc.save(`LabTest_${labTest?.id ?? ""}.pdf`);
      },
      x: 40,
      y: 80,
      width: 520,
      windowWidth: 800,
    });
  };

  return (
    <>
      <span onClick={openModal}>{trigger}</span>

      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)} title="Lab Test Details">
        {labTest ? (
          <div>
            {/* Action buttons */}
            <div className="flex gap-2 mb-4">
              <button
                onClick={handlePrint}
                className="px-3 py-1 bg-blue-600 text-white rounded"
              >
                Print
              </button>
              <button
                onClick={handleSavePDF}
                className="px-3 py-1 bg-green-600 text-white rounded"
              >
                Save as PDF
              </button>
            </div>

            {/* Printable content */}
            <div
              ref={contentRef}
              className="max-h-[400px] overflow-y-auto p-4 border border-gray-200 rounded space-y-4 text-sm"
            >
              {/* Custom header */}
              <div className="text-center mb-4">
                <h2 className="text-lg font-bold">🧪 Lab Test Report</h2>
                <p className="text-xs text-gray-500">Generated on {today}</p>
              </div>

              <p>
                <strong>Patient:</strong>{" "}
                {labTest.medical_record.patient.first_name}{" "}
                {labTest.medical_record.patient.last_name}
              </p>
              <p>
                <strong>Test:</strong> {labTest.services?.service_name ?? "-"}
              </p>
              <p>
                <strong>Date:</strong> {formatDateSafe(labTest.test_date)}
              </p>
              <p>
                <strong>Result:</strong> {labTest.result ?? "-"}
              </p>
              <p>
                <strong>Status:</strong> {labTest.status ?? "-"}
              </p>
              <p>
                <strong>Units:</strong> {labTest.units ?? "-"}
              </p>
              <p>
                <strong>Reference:</strong> {labTest.reference_range ?? "-"}
              </p>
              <p>
                <strong>Notes:</strong> {labTest.notes ?? "-"}
              </p>

              {/* Custom footer */}
              <div className="text-center text-xs text-gray-400 mt-6">
                Confidential – Generated by Healthcare System
              </div>
            </div>
          </div>
        ) : (
          <p className="text-gray-500">Loading...</p>
        )}
      </Modal>
    </>
  );
};
